using System.Runtime.InteropServices;
using System;

using ThirtyTwo.Kernel32.Enumerations;

namespace ThirtyTwo.Kernel32.Structures
{
    /// <summary>
    /// Describes a keyboard input event in a console "INPUT_RECORD" structure.
    /// </summary>
    [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Auto)]
    public struct KEY_EVENT_RECORD : IEquatable<KEY_EVENT_RECORD>
    {
        #region Public Members

        /// <summary>
        /// If the key is pressed, this member is "TRUE". Otherwise, this member is "FALSE"
        /// (the key is released).
        /// </summary>
        [FieldOffset(0)]
        public bool bKeyDown;

        /// <summary>
        /// The repeat count, which indicates that a key is being held down. For example, when
        /// a key is held down, you might get five events with this member equal to "1", one
        /// event with this member equal to "5", or multiple events with this member greater
        /// than or equal to "1".
        /// </summary>
        [FieldOffset(1)]
        public ushort wRepeatCount;

        /// <summary>
        /// A virtual-key code that identifies the given key in a device-independent manner.
        /// </summary>
        [FieldOffset(2)]
        public VIRTUAL_KEY wVirtualKeyCode;

        /// <summary>
        /// The virtual scan code of the given key that represents the device-dependent value
        /// generated by the keyboard hardware.
        /// </summary>
        [FieldOffset(3)]
        public ushort wVirtualScanCode;

        /// <summary>
        /// Translated Unicode character.
        /// </summary>
        [FieldOffset(4)]
        public char UnicodeChar;

        /// <summary>
        /// Translated ASCII character.
        /// </summary>
        [FieldOffset(4)]
        public char AsciiChar;

        /// <summary>
        /// The state of the control keys. This member can contain one or a combination of
        /// values ​​from the "CTRL_KEY_STATE" enumeration.
        /// </summary>
        [FieldOffset(5)]
        public CTRL_KEY_STATE dwControlKeyState;

        #endregion

        // @

        #region Logical Operator: Comparison (Equals) => bool

        /// <inheritdoc />
        public static bool operator ==(
            KEY_EVENT_RECORD firstStructure,
            KEY_EVENT_RECORD secondStructure
        )
        {
            if (firstStructure == null || secondStructure == null)
            {
                return false;
            }

            return
                firstStructure.bKeyDown == secondStructure.bKeyDown &&
                firstStructure.wRepeatCount == secondStructure.wRepeatCount &&
                firstStructure.wVirtualKeyCode == secondStructure.wVirtualKeyCode &&
                firstStructure.wVirtualScanCode == secondStructure.wVirtualScanCode &&
                firstStructure.UnicodeChar == secondStructure.UnicodeChar &&
                firstStructure.AsciiChar == secondStructure.AsciiChar &&
                firstStructure.dwControlKeyState == secondStructure.dwControlKeyState
            ;
        }

        #endregion

        // @

        #region Logical Operator: Comparison (Different) => bool

        /// <inheritdoc />
        public static bool operator !=(
            KEY_EVENT_RECORD firstStructure,
            KEY_EVENT_RECORD secondStructure
        )
        {
            if (firstStructure == null || secondStructure == null)
            {
                return false;
            }

            return
                firstStructure.bKeyDown != secondStructure.bKeyDown ||
                firstStructure.wRepeatCount != secondStructure.wRepeatCount ||
                firstStructure.wVirtualKeyCode != secondStructure.wVirtualKeyCode ||
                firstStructure.wVirtualScanCode != secondStructure.wVirtualScanCode ||
                firstStructure.UnicodeChar != secondStructure.UnicodeChar ||
                firstStructure.AsciiChar != secondStructure.AsciiChar ||
                firstStructure.dwControlKeyState != secondStructure.dwControlKeyState
            ;
        }

        #endregion

        // @

        #region Equals => bool

        /// <inheritdoc />
        public bool Equals(KEY_EVENT_RECORD other)
        {
            return this == other;
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (obj is KEY_EVENT_RECORD rECORD)
            {
                return this == rECORD;
            }

            return base.Equals(obj);
        }

        #endregion

        // @

        #region To String => string

        /// <inheritdoc />
        public override string ToString()
        {
            return
                @"{ " +
                $"bKeyDown: {bKeyDown}, " +
                $"wRepeatCount: {wRepeatCount}, " +
                $"wVirtualKeyCode: {wVirtualKeyCode}, " +
                $"wVirtualScanCode: {wVirtualScanCode}, " +
                $"UnicodeChar: {UnicodeChar}, " +
                $"AsciiChar: {AsciiChar}, " +
                $"dwControlKeyState: {dwControlKeyState} " +
                @"}";
        }

        #endregion

        // @

        #region GetHashCode => int

        /// <inheritdoc />
        public override int GetHashCode()
        {
            return bKeyDown.GetHashCode() ^
                wRepeatCount.GetHashCode() ^
                wVirtualKeyCode.GetHashCode() ^
                wVirtualScanCode.GetHashCode() ^
                UnicodeChar.GetHashCode() ^
                AsciiChar.GetHashCode() ^
                dwControlKeyState.GetHashCode();
        }

        #endregion
    }
}
